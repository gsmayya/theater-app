version: '3.8'

services:
  # Frontend - Theater Website
  theater-website:
    build: 
      context: ./theater-website
      dockerfile: Dockerfile
    container_name: theater-website
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=production
    depends_on:
      theater-backend:
        condition: service_healthy
    networks:
      - theater-network
    restart: unless-stopped

  # Backend - Theater API
  theater-backend:
    build:
      context: ./theater
      dockerfile: Dockerfile
    container_name: theater-backend
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=mysql-theater
      - DB_PORT=3306
      - DB_USER=theater_user
      - DB_PASSWORD=theater_password
      - DB_NAME=theater_booking
      - REDIS_URL=redis-theater:6379
      - REDIS_PASSWORD=theater_redis_pass
      - GO_ENV=production
    depends_on:
      mysql-theater:
        condition: service_healthy
      redis-theater:
        condition: service_healthy
    networks:
      - theater-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "-O", "/dev/null", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache with Persistence
  redis-theater:
    image: redis:7-alpine
    container_name: redis-theater
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass theater_redis_pass
    environment:
      - REDIS_PASSWORD=theater_redis_pass
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - theater-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "theater_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # MySQL Database with Initialization
  mysql-theater:
    image: mysql:8.0
    container_name: mysql-theater
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: theater_root_password
      MYSQL_DATABASE: theater_booking
      MYSQL_USER: theater_user
      MYSQL_PASSWORD: theater_password
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
      # Additional MySQL configuration for data persistence
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      # Persistent data storage
      - mysql_data:/var/lib/mysql
      # Configuration files
      - ./theater/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      # Backup directory (mounted for backup scripts)
      - mysql_backups:/backups
      # Logs directory
      - mysql_logs:/var/log/mysql
    networks:
      - theater-network
    restart: unless-stopped
    # Enhanced health check
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "theater_user", "-ptheater_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M    

# Named volumes for data persistence
volumes:
  mysql_data:    
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mysql
  mysql_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backups
  mysql_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

# Custom network
networks:
  theater-network:
    driver: bridge


